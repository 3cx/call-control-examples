{"version":3,"file":"index.es.js","sources":["../../node_modules/style-inject/dist/style-inject.es.js","../src/constants.ts","../src/hooks.tsx","../src/components/Select/SelectComponent.tsx","../src/components/CallActions/CallActions.tsx","../src/components/BackSpaceBtn/BackSpaceBtnComponent.tsx","../src/components/Spinner/SpinnerComponent.tsx","../src/components/TransferComponent/TransferComponent.tsx","../src/components/Dialer/DialerComponent.tsx","../src/components/ButtonForms/button-forms.tsx","../src/components/Error/error.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","export const PARTICIPANT_CONTROL_DROP = \"drop\";\r\nexport const PARTICIPANT_CONTROL_ANSWER = \"answer\";\r\nexport const PARTICIPANT_CONTROL_DIVERT = \"divert\";\r\nexport const PARTICIPANT_CONTROL_ROUTE_TO = \"routeto\";\r\nexport const PARTICIPANT_CONTROL_TRANSFER_TO = \"transferto\";\r\nexport const PARTICIPANT_CONTROL_ATTACH_DATA = \"attach_participant_data\";\r\n\r\nexport const PARTICIPANT_STATUS_CONNECTED = \"Connected\";\r\nexport const PARTICIPANT_STATUS_DIALING = \"Dialing\";\r\nexport const PARTICIPANT_STATUS_RINGING = \"Ringing\";\r\n","import { useEffect } from \"react\";\r\n\r\ninterface OutsideClickHandlerProps {\r\n  ref: React.RefObject<HTMLElement>;\r\n  handler: () => void;\r\n}\r\n\r\nconst useOutsideClick = ({ ref, handler }: OutsideClickHandlerProps) => {\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (ref.current && !ref.current.contains(event.target as Node)) {\r\n        handler();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [ref, handler]);\r\n};\r\n\r\nexport default useOutsideClick;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport useOutsideClick from \"../../hooks\";\r\nimport { DNDevice } from \"../../types\";\r\n\r\ninterface SelectProps {\r\n  title?: string;\r\n  data: DNDevice[];\r\n  selectedId?: string;\r\n  onSelect?: (id: string) => void;\r\n}\r\n\r\nexport const Select: React.FC<SelectProps> = ({\r\n  title = \"Select\",\r\n  data,\r\n  selectedId,\r\n  onSelect,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const selectRef = useRef<HTMLDivElement>(null);\r\n  useOutsideClick({\r\n    ref: selectRef,\r\n    handler: () => setIsOpen(false),\r\n  });\r\n  const [selectedItem, setSelected] = useState<DNDevice | undefined>(\r\n    selectedId ? data.find((item) => item.device_id === selectedId) : undefined\r\n  );\r\n\r\n  const handleChange = (item: DNDevice) => {\r\n    setSelected(item);\r\n    onSelect && onSelect(item.device_id!);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedId && data) {\r\n      const newSelected = data.find((item) => item.device_id === selectedId);\r\n      newSelected && setSelected(newSelected);\r\n    } else {\r\n      setSelected(undefined);\r\n    }\r\n  }, [selectedId, data]);\r\n\r\n  return (\r\n    <div\r\n      ref={selectRef}\r\n      className=\"w-full relative inline-block text-left bg-darklight\"\r\n    >\r\n      <div className=\"group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"inline-flex items-center justify-between w-full px-4 py-2 text-sm font-medium text-white\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n        >\r\n          <span>{selectedItem?.user_agent || title}</span>\r\n          <svg\r\n            className=\"w-4 h-4 ml-2 -mr-1\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"currentColor\"\r\n          >\r\n            <path fillRule=\"evenodd\" d=\"M10 12l-5-5h10l-5 5z\" />\r\n          </svg>\r\n        </button>\r\n        {isOpen && (\r\n          <ul className=\"absolute w-full left-0 origin-top-left bg-darklight text-white divide-y divide-gray-100 shadow-lg\">\r\n            {data?.map((item) => (\r\n              <li\r\n                key={item.device_id}\r\n                onClick={() => handleChange(item)}\r\n                className=\"block px-4 py-2 text-sm text-white-600 cursor-pointer border-none hover:bg-bghover\"\r\n              >\r\n                {item.user_agent}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  PARTICIPANT_CONTROL_DIVERT,\r\n  PARTICIPANT_CONTROL_TRANSFER_TO,\r\n} from \"../../constants\";\r\nimport { DialerState } from \"../Dialer/DialerComponent\";\r\nimport { CallControlParticipantAction } from \"../../types\";\r\n\r\ntype CallActionsProps = {\r\n  state: DialerState;\r\n  onCallAction: (action: CallControlParticipantAction) => void;\r\n  initializing: boolean;\r\n};\r\n\r\nexport const CallActions: React.FC<CallActionsProps> = ({\r\n  onCallAction,\r\n  state,\r\n  initializing,\r\n}) => {\r\n  return (\r\n    <div className=\"h-3/5 border-t-2 border-b-2 border-darklight grid grid-cols-3 text-white text-center font-bold text-lg\">\r\n      <button\r\n        className=\"btn-dialer\"\r\n        disabled={state !== DialerState.Ringing || initializing}\r\n        onClick={() => onCallAction(PARTICIPANT_CONTROL_DIVERT)}\r\n      >\r\n        <svg\r\n          className=\"h-[35px] w-[35px]\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 640 512\"\r\n        >\r\n          <path\r\n            fill=\"white\"\r\n            d=\"M232 0c9.7 0 18.5 5.8 22.2 14.8s1.7 19.3-5.2 26.2l-39 39 58.7 58.7C282.3 152.4 300.8 160 320 160s37.7-7.6 51.3-21.3L503 7c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L405.3 172.7C382.6 195.3 352 208 320 208s-62.6-12.7-85.3-35.3L176 113.9l-39 39c-6.9 6.9-17.2 8.9-26.2 5.2s-14.8-12.5-14.8-22.2V24c0-13.3 10.7-24 24-24H232zM51.4 489.9l-35.4-62c-9.7-16.9-8.3-38.1 5.5-51.7C72.6 325.9 178.1 256 320 256s247.4 69.9 298.5 120.2c13.9 13.6 15.2 34.8 5.5 51.7l-35.4 62c-7.4 12.9-22.7 19.1-37 14.8L438.8 470.8c-13.5-4.1-22.8-16.5-22.8-30.6V384c-62.3-20.8-129.7-20.8-192 0v56.2c0 14.1-9.3 26.6-22.8 30.6L88.4 504.7c-14.3 4.3-29.6-1.8-37-14.8z\"\r\n          />\r\n        </svg>\r\n        <span>Divert</span>\r\n      </button>\r\n      <button\r\n        onClick={() => onCallAction(PARTICIPANT_CONTROL_TRANSFER_TO)}\r\n        className=\"btn-dialer\"\r\n        disabled={state !== DialerState.Connected || initializing}\r\n      >\r\n        <svg\r\n          className=\"h-[35px] w-[35px]\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 32 32\"\r\n        >\r\n          <path\r\n            d=\"M26.74 10.6c-1.35-1.44-2.73-2.84-4.11-4.25-.42-.42-.95-.4-1.45-.2-.51.21-.67.65-.67 1.18v2.01c-.81 0-.79.05-1.5-.02-.75-.07-1.26.23-1.76.78-3.37 3.76-6.77 7.48-10.13 11.24-.37.41-.75.59-1.29.57-1.03-.04.29-.02-.75-.01-.87.02-.95.1-.96 1.02-.01.77-.01 1.54 0 2.3.02.83.1.93.9.93 1.67 0 .98-.02 2.65.01.5.01.84-.16 1.18-.53 3.41-3.8 6.87-7.58 10.26-11.4.66-.74.58-.69 1.41-.56 0 .66.01 1.29 0 1.91-.01.56.18 1.01.71 1.23.52.22 1.03.18 1.44-.24 1.35-1.37 2.69-2.74 4.02-4.14.46-.5.5-1.34.05-1.83zM5.03 13.14c1.17-.04-.19.03.98-.03.66-.03 1.12.16 1.55.69.75.91 1.58 1.76 2.41 2.69 1.05-1.19 2.02-2.28 3.06-3.45-1.35-1.49-2.61-2.91-3.91-4.3-.18-.19-.53-.3-.81-.3-1.97-.03-1.4-.01-3.38-.02-.56 0-.83.24-.83.82.01 1.01.01 2.01 0 3.01-.01.67.3.91.93.89z\"\r\n            fill=\"white\"\r\n          />\r\n        </svg>\r\n        <span>Transfer</span>\r\n      </button>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n","interface BackSpaceBtnProps {\r\n  onClickBS: () => void;\r\n}\r\n\r\nexport const BackSpaceBtn: React.FC<BackSpaceBtnProps> = ({ onClickBS }) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={() => onClickBS()}\r\n      className=\"w-[30px] h-[30px] mr-4 active:scale-105\"\r\n    >\r\n      <svg\r\n        className=\"w-25 h-25 fill-white hover:fill-gray-400\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 576 512\"\r\n      >\r\n        <path d=\"M576 128c0-35.3-28.7-64-64-64H205.3c-17 0-33.3 6.7-45.3 18.7L9.4 233.4c-6 6-9.4 14.1-9.4 22.6s3.4 16.6 9.4 22.6L160 429.3c12 12 28.3 18.7 45.3 18.7H512c35.3 0 64-28.7 64-64V128zM271 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n};\r\n","type SpinnerProps = {\r\n  color?: string;\r\n};\r\nexport const Spinner: React.FC<SpinnerProps> = ({ color }) => {\r\n  return (\r\n    <div\r\n      aria-label=\"Loading...\"\r\n      role=\"status\"\r\n      className=\"flex items-center space-x-2\"\r\n    >\r\n      <svg\r\n        className={`h-[30px] w-[30px] animate-spin ${\r\n          !!color ? \"color\" : \"stroke-gray-500\"\r\n        }`}\r\n        viewBox=\"0 0 256 256\"\r\n      >\r\n        <line\r\n          x1=\"128\"\r\n          y1=\"32\"\r\n          x2=\"128\"\r\n          y2=\"64\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"195.9\"\r\n          y1=\"60.1\"\r\n          x2=\"173.3\"\r\n          y2=\"82.7\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"224\"\r\n          y1=\"128\"\r\n          x2=\"192\"\r\n          y2=\"128\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"195.9\"\r\n          y1=\"195.9\"\r\n          x2=\"173.3\"\r\n          y2=\"173.3\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"128\"\r\n          y1=\"224\"\r\n          x2=\"128\"\r\n          y2=\"192\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"60.1\"\r\n          y1=\"195.9\"\r\n          x2=\"82.7\"\r\n          y2=\"173.3\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"32\"\r\n          y1=\"128\"\r\n          x2=\"64\"\r\n          y2=\"128\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"60.1\"\r\n          y1=\"60.1\"\r\n          x2=\"82.7\"\r\n          y2=\"82.7\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n","import { BackSpaceBtn } from \"../BackSpaceBtn/BackSpaceBtnComponent\";\r\nimport { Spinner } from \"../Spinner/SpinnerComponent\";\r\n\r\ntype TransferComponentProps = {\r\n  onPerformingOperation: boolean;\r\n  onOperation: () => void;\r\n  inputRef: React.Ref<HTMLInputElement>;\r\n  destinationNumber: string;\r\n  setDestinationNumber: (num: string) => void;\r\n  label: string;\r\n};\r\n\r\nexport const TransferComponent: React.FC<TransferComponentProps> = ({\r\n  onPerformingOperation: performingTransfer,\r\n  onOperation: onTransfer,\r\n  inputRef,\r\n  destinationNumber: transferNumber,\r\n  setDestinationNumber: setTransferNumber,\r\n  label,\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-2 items-center justify-center text-sm py-5\">\r\n      <label htmlFor=\"tranferField\" className=\"text-sm\">\r\n        {label}\r\n      </label>\r\n      <input\r\n        id=\"transferField\"\r\n        ref={inputRef}\r\n        className=\"focus:outline-none text-center h-[34px] bg-transparent border-b border-darklight\"\r\n        value={transferNumber}\r\n        onChange={(e) => setTransferNumber(e.target.value)}\r\n      ></input>\r\n      <BackSpaceBtn\r\n        onClickBS={() =>\r\n          setTransferNumber(\r\n            transferNumber.substring(0, transferNumber.length - 1)\r\n          )\r\n        }\r\n      />\r\n      <button\r\n        disabled={transferNumber.length < 1 || performingTransfer}\r\n        className=\"bg-green-500 p-2 rounded-md disabled:bg-gray-400\"\r\n        onClick={() => onTransfer()}\r\n      >\r\n        {performingTransfer ? <Spinner /> : \"Proceed\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  PARTICIPANT_CONTROL_ANSWER,\r\n  PARTICIPANT_CONTROL_DROP,\r\n  PARTICIPANT_CONTROL_TRANSFER_TO,\r\n  PARTICIPANT_STATUS_CONNECTED,\r\n  PARTICIPANT_STATUS_DIALING,\r\n  PARTICIPANT_STATUS_RINGING,\r\n} from \"../../constants\";\r\nimport { Select } from \"../Select/SelectComponent\";\r\nimport {\r\n  ReactNode,\r\n  useCallback,\r\n  useEffect,\r\n  useReducer,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  CallControlParticipantAction,\r\n  CallingExtensionsContract,\r\n  CurrentCall,\r\n  DNDevice,\r\n} from \"../../types\";\r\nimport { CallActions } from \"../CallActions/CallActions\";\r\nimport { TransferComponent } from \"../TransferComponent/TransferComponent\";\r\nimport { BackSpaceBtn } from \"../BackSpaceBtn/BackSpaceBtnComponent\";\r\nimport { Spinner } from \"../Spinner/SpinnerComponent\";\r\n\r\nexport interface DialerProps {\r\n  eventSourceUrl: string;\r\n  devices: DNDevice[];\r\n  activeDeviceId?: string;\r\n  phoneNumber?: string;\r\n  sourceCallerId: string;\r\n  onMakeCall: (dest?: string) => Promise<Response>;\r\n  onDeviceSelect: (id: string) => Promise<Response>;\r\n  onCallControlParticipant: (\r\n    action: CallControlParticipantAction,\r\n    participantid?: number,\r\n    dest?: string\r\n  ) => Promise<Response>;\r\n  extensions?: CallingExtensionsContract;\r\n  engagementId?: number | null;\r\n}\r\n\r\nexport enum DialerState {\r\n  Idle,\r\n  Dialing,\r\n  Ringing,\r\n  Connected,\r\n}\r\n\r\nfunction callStateReducer(\r\n  state: CurrentCall | undefined,\r\n  action: {\r\n    type: \"full_update\" | \"attach_data\";\r\n    newState?: CurrentCall;\r\n    attachedData?: CurrentCall[\"attachedData\"];\r\n  }\r\n): CurrentCall | undefined {\r\n  switch (action.type) {\r\n    case \"full_update\": {\r\n      if (action.newState !== undefined) {\r\n        return {\r\n          ...action.newState,\r\n          attachedData: {\r\n            ...action.newState.attachedData,\r\n            ...(state?.attachedData || []), // we keep old attached data because it can contain hubspot data\r\n          },\r\n        };\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n    case \"attach_data\": {\r\n      if (action.attachedData !== undefined && state !== undefined) {\r\n        return {\r\n          ...state,\r\n          attachedData: action.attachedData,\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const Dialer: React.FC<DialerProps> = ({\r\n  eventSourceUrl,\r\n  onDeviceSelect,\r\n  devices,\r\n  onMakeCall,\r\n  onCallControlParticipant,\r\n  activeDeviceId,\r\n  phoneNumber,\r\n  extensions,\r\n  sourceCallerId,\r\n  engagementId,\r\n}) => {\r\n  const [dialedNumber, setDialed] = useState(phoneNumber ?? \"\");\r\n  const [dialerState, setDialerState] = useState(DialerState.Idle);\r\n  const [currentCalls, setCurrentCalls] = useState<CurrentCall[]>([]);\r\n  const [callState, dispatchCallState] = useReducer(\r\n    callStateReducer,\r\n    undefined\r\n  );\r\n\r\n  const [ccOpertation, setCCOperation] = useState<\r\n    CallControlParticipantAction | undefined\r\n  >(undefined);\r\n  const [operationDestination, setOperationDestination] = useState(\"\");\r\n\r\n  const [isOperationInProcess, setIsOperationInProccess] = useState(false);\r\n  const [performingAnswer, setPerformingAnswer] = useState(false);\r\n  const [switchingDevice, setSwitchingDevice] = useState(false);\r\n  const [isForceDropEnabled, setEnableForceDrop] = useState(false);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    const source = new EventSource(eventSourceUrl);\r\n    source.onopen = () => {\r\n      console.log(\"EventSource Connected\");\r\n      extensions?.initialized({\r\n        isLoggedIn: true,\r\n        sizeInfo: { width: 400, height: 600 },\r\n        engagementId,\r\n      });\r\n    };\r\n    source.onerror = console.error;\r\n    source.onmessage = function (e) {\r\n      try {\r\n        const data = JSON.parse(e.data);\r\n        setCurrentCalls(data.currentCalls);\r\n      } catch (e) {\r\n        extensions?.sendError({\r\n          message: \"Failed to parse JSON from EventSource\",\r\n        });\r\n      }\r\n    };\r\n    return () => source.close();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (dialerState === DialerState.Idle) {\r\n      if (phoneNumber && phoneNumber.length > 0) {\r\n        handleCallAnswer(phoneNumber);\r\n      }\r\n    }\r\n  }, [phoneNumber]);\r\n\r\n  useEffect(() => {\r\n    dispatchCallState({\r\n      type: \"attach_data\",\r\n      attachedData: { engagementId },\r\n    });\r\n  }, [engagementId]);\r\n\r\n  useEffect(() => {\r\n    const connectedCall = currentCalls?.find(\r\n      (call) => call.status === PARTICIPANT_STATUS_CONNECTED\r\n    );\r\n    const incomingCall = currentCalls?.find(\r\n      (call) => call.status === PARTICIPANT_STATUS_RINGING\r\n    );\r\n    const outgoingCall = currentCalls?.find(\r\n      (call) => call.status === PARTICIPANT_STATUS_DIALING\r\n    );\r\n\r\n    if (connectedCall && dialerState !== DialerState.Connected) {\r\n      if (dialerState === DialerState.Dialing) {\r\n        extensions?.callAnswered(); // hubspot outgoing call answered notify\r\n      }\r\n      setDialerState(DialerState.Connected);\r\n\r\n      dispatchCallState({ type: \"full_update\", newState: connectedCall });\r\n    }\r\n\r\n    if (outgoingCall && !callState) {\r\n      dispatchCallState({ type: \"full_update\", newState: outgoingCall });\r\n      if (dialerState !== DialerState.Dialing) {\r\n        setDialerState(DialerState.Dialing);\r\n      }\r\n      extensions?.outgoingCall({\r\n        //hubspot outgoing call notify\r\n        toNumber: outgoingCall.party || \"\",\r\n        createEngagement: true,\r\n        fromNumber: sourceCallerId,\r\n      });\r\n    }\r\n\r\n    if (incomingCall && !callState && dialerState === DialerState.Idle) {\r\n      setDialerState(DialerState.Ringing);\r\n      dispatchCallState({ type: \"full_update\", newState: incomingCall });\r\n    }\r\n\r\n    if (\r\n      currentCalls?.length === 0 &&\r\n      callState !== undefined &&\r\n      dialerState !== DialerState.Idle\r\n    ) {\r\n      const callEndStatus =\r\n        callState.status === PARTICIPANT_STATUS_CONNECTED\r\n          ? \"COMPLETED\"\r\n          : \"CANCELED\";\r\n      extensions?.callEnded({\r\n        callEndStatus,\r\n      });\r\n      extensions?.callCompleted({\r\n        engagementId: callState.attachedData.engagementId,\r\n        engagementProperties: {\r\n          hs_call_status: callEndStatus,\r\n        },\r\n      }); // Hubspot call completed\r\n\r\n      setDialerState(DialerState.Idle);\r\n      dispatchCallState({ type: \"full_update\", newState: undefined });\r\n    }\r\n  }, [\r\n    dialerState,\r\n    setDialerState,\r\n    dispatchCallState,\r\n    callState,\r\n    currentCalls,\r\n    setCurrentCalls,\r\n    extensions,\r\n  ]);\r\n\r\n  const renderButtons = () => {\r\n    const content: ReactNode[] = [];\r\n    for (let i = 1; i <= 12; i++) {\r\n      let symbol: string | number = \"\";\r\n      if (i < 10) {\r\n        symbol = i;\r\n      } else if (i === 10) {\r\n        symbol = \"*\";\r\n      } else if (i === 11) {\r\n        symbol = 0;\r\n      } else if (i === 12) {\r\n        symbol = \"#\";\r\n      }\r\n      content.push(\r\n        <button\r\n          onClick={() => setDialed((prev) => prev + symbol)}\r\n          className=\"btn-dialer\"\r\n          key={i}\r\n        >\r\n          {symbol}\r\n        </button>\r\n      );\r\n    }\r\n    return content;\r\n  };\r\n\r\n  const onCallControlAction = useCallback(\r\n    (action: CallControlParticipantAction) => {\r\n      setOperationDestination(\"\");\r\n      if (ccOpertation) {\r\n        setCCOperation(undefined);\r\n      } else {\r\n        setCCOperation(action);\r\n      }\r\n    },\r\n    [setOperationDestination, ccOpertation, setCCOperation]\r\n  );\r\n\r\n  const handleCallControlParticipant = useCallback(async () => {\r\n    if (!ccOpertation) {\r\n      return;\r\n    }\r\n    setIsOperationInProccess(true);\r\n    try {\r\n      await onCallControlParticipant(\r\n        ccOpertation,\r\n        callState?.participantId,\r\n        operationDestination\r\n      );\r\n    } catch (e) {\r\n    } finally {\r\n      setCCOperation(undefined);\r\n      setIsOperationInProccess(false);\r\n    }\r\n  }, [\r\n    ccOpertation,\r\n    setCCOperation,\r\n    setIsOperationInProccess,\r\n    operationDestination,\r\n    onCallControlParticipant,\r\n    callState,\r\n  ]);\r\n\r\n  const handleActiveDevice = useCallback(\r\n    async (id: string) => {\r\n      setSwitchingDevice(true);\r\n      try {\r\n        await onDeviceSelect(id);\r\n      } catch (e) {\r\n      } finally {\r\n        setSwitchingDevice(false);\r\n        setDialerState(DialerState.Idle);\r\n        dispatchCallState({ type: \"full_update\", newState: undefined });\r\n      }\r\n    },\r\n    [setSwitchingDevice, onDeviceSelect, setDialerState, dispatchCallState]\r\n  );\r\n\r\n  const handleOnDrop = async () => {\r\n    setEnableForceDrop(false);\r\n    try {\r\n      await onCallControlParticipant(\r\n        PARTICIPANT_CONTROL_DROP,\r\n        callState?.participantId\r\n      );\r\n    } catch (e) {\r\n      setDialerState(DialerState.Idle);\r\n    } finally {\r\n      if (isOperationInProcess) {\r\n        setOperationDestination(\"\");\r\n        setIsOperationInProccess(false);\r\n        setCCOperation(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCallAnswer = async (phoneNumber?: string) => {\r\n    const isIncoming = callState?.status === PARTICIPANT_STATUS_RINGING;\r\n    let timeout: number | null = null;\r\n    if (isIncoming && callState.directControll) {\r\n      setPerformingAnswer(true);\r\n      try {\r\n        await onCallControlParticipant(\r\n          PARTICIPANT_CONTROL_ANSWER,\r\n          callState.participantId\r\n        );\r\n      } catch (e) {\r\n      } finally {\r\n        setPerformingAnswer(false);\r\n      }\r\n    } else if (phoneNumber?.length || dialedNumber.length) {\r\n      try {\r\n        await onMakeCall(phoneNumber || dialedNumber);\r\n        setDialed(\"\");\r\n        if (dialerState !== DialerState.Dialing) {\r\n          setDialerState(DialerState.Dialing);\r\n          timeout = setTimeout(() => {\r\n            setEnableForceDrop(true);\r\n          }, 5000);\r\n        }\r\n      } catch (e) {\r\n        setDialerState(DialerState.Idle);\r\n        if (timeout) {\r\n          clearTimeout(timeout);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderStateNumber = () => {\r\n    switch (dialerState) {\r\n      case DialerState.Idle:\r\n        return (\r\n          <div className=\"flex justify-center items-end\">\r\n            <input\r\n              ref={inputRef}\r\n              className=\"bg-transparent focus:outline-none text-center\"\r\n              value={dialedNumber}\r\n              onChange={(e) => setDialed(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        );\r\n      case DialerState.Dialing:\r\n      case DialerState.Connected:\r\n      case DialerState.Ringing: {\r\n        return (\r\n          <div className=\"flex flex-col items-center justify-end\">\r\n            <span>\r\n              {callState?.party ? (\r\n                <div className=\"flex flex-col gap-2\">\r\n                  <span className=\"text-center\">{callState.party}</span>\r\n                  <span\r\n                    className={`flex items-center gap-1 font-bold text-sm animate-pulse ${\r\n                      dialerState === DialerState.Connected\r\n                        ? \"text-green-500\"\r\n                        : \"text-yellow-400\"\r\n                    }`}\r\n                  >\r\n                    <svg\r\n                      className={`w-[12px] h-[12px] ${\r\n                        dialerState === DialerState.Connected\r\n                          ? \"fill-green-500\"\r\n                          : \"fill-yellow-400\"\r\n                      }`}\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 512 512\"\r\n                    >\r\n                      <path d=\"M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z\" />\r\n                    </svg>\r\n                    {dialerState === DialerState.Connected\r\n                      ? \"Conencted\"\r\n                      : \"Dialing\"}\r\n                  </span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex flex-col gap-2\">\r\n                  <span className=\"animate-pulse font-bold text-sm text-white\"></span>\r\n                  <Spinner />\r\n                </div>\r\n              )}\r\n            </span>\r\n            {callState?.name && <span>{callState.name}</span>}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-[400px] h-[600px] bg-darkBg flex flex-col\">\r\n      <div>\r\n        {devices && (\r\n          <Select\r\n            data={devices}\r\n            selectedId={activeDeviceId}\r\n            onSelect={handleActiveDevice}\r\n          />\r\n        )}\r\n      </div>\r\n      <div\r\n        className=\"h-2/5 text-white font-bold text-xl grid grid-rows-2\"\r\n        onClick={() => inputRef.current?.focus()}\r\n      >\r\n        {renderStateNumber()}\r\n        {dialerState === DialerState.Idle && (\r\n          <div className=\"flex justify-end items-center\">\r\n            <BackSpaceBtn\r\n              onClickBS={() =>\r\n                setDialed(dialedNumber.substring(0, dialedNumber.length - 1))\r\n              }\r\n            />\r\n          </div>\r\n        )}\r\n        {dialerState !== DialerState.Idle && ccOpertation !== undefined && (\r\n          <TransferComponent\r\n            inputRef={inputRef}\r\n            onOperation={handleCallControlParticipant}\r\n            onPerformingOperation={isOperationInProcess}\r\n            destinationNumber={operationDestination}\r\n            setDestinationNumber={setOperationDestination}\r\n            label={\r\n              ccOpertation === PARTICIPANT_CONTROL_TRANSFER_TO\r\n                ? \"Transfer to:\"\r\n                : \"Divert to:\"\r\n            }\r\n          />\r\n        )}\r\n      </div>\r\n      {dialerState === DialerState.Idle ? (\r\n        <div className=\"h-3/5 border-t-2 border-b-2 border-darklight grid grid-cols-3 text-white text-center font-bold text-lg\">\r\n          {renderButtons()}\r\n        </div>\r\n      ) : (\r\n        <CallActions\r\n          onCallAction={onCallControlAction}\r\n          state={dialerState}\r\n          initializing={!callState}\r\n        />\r\n      )}\r\n      <div className=\"h-1/6 flex flex-row\">\r\n        {(dialerState === DialerState.Idle ||\r\n          dialerState === DialerState.Ringing) && (\r\n          <div className=\"flex justify-center items-center w-full\">\r\n            <button\r\n              type=\"button\"\r\n              disabled={\r\n                switchingDevice ||\r\n                performingAnswer ||\r\n                (callState !== undefined\r\n                  ? callState.directControll !== true\r\n                  : false)\r\n              }\r\n              onClick={() => handleCallAnswer()}\r\n              className=\"flex justify-center items-center w-full h-full bg-green-500 hover:bg-green-700 disabled:bg-gray-400\"\r\n            >\r\n              <svg\r\n                fill=\"white\"\r\n                className=\"w-[25px] h-[25px]\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 512 512\"\r\n              >\r\n                <path d=\"M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        )}\r\n        {dialerState !== DialerState.Idle && (\r\n          <div className=\"flex justify-center items-center w-full\">\r\n            <button\r\n              disabled={\r\n                (switchingDevice ||\r\n                  (dialerState === DialerState.Dialing &&\r\n                    callState === undefined)) &&\r\n                !isForceDropEnabled\r\n              }\r\n              onClick={() => handleOnDrop()}\r\n              className=\"flex justify-center items-center w-full h-full bg-red-500 hover:bg-red-700 disabled:bg-gray-400\"\r\n            >\r\n              <svg\r\n                fill=\"white\"\r\n                className=\"w-[25px] h-[25px] rotate-[133deg]\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 512 512\"\r\n              >\r\n                <path d=\"M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Spinner } from \"../Spinner/SpinnerComponent\";\r\n\r\ntype BtnFormProps = {\r\n  type: \"button\" | \"submit\";\r\n  disabled: boolean;\r\n  label: string;\r\n  isLoading: boolean;\r\n  onBtnClick?: (...args: any[]) => void;\r\n};\r\n\r\nexport const ButtonForms: React.FC<BtnFormProps> = ({\r\n  type,\r\n  disabled,\r\n  label,\r\n  isLoading,\r\n  onBtnClick,\r\n}: BtnFormProps) => {\r\n  return (\r\n    <button\r\n      disabled={disabled}\r\n      onClick={onBtnClick}\r\n      type={type}\r\n      className=\"flex justify-center items-center rounded w-[150px] h-[45px] bg-gray-800 hover:bg-gray-700 text-white disabled:bg-gray-400 disabled:text-gray-600\"\r\n    >\r\n      {isLoading ? <Spinner /> : label}\r\n    </button>\r\n  );\r\n};\r\n","interface ErrorProps {\r\n  message: string;\r\n}\r\nexport const Error: React.FC<ErrorProps> = ({ message }: ErrorProps) => {\r\n  return (\r\n    <div className=\"bg-red-200 px-6 py-4 my-4 rounded-md flex items-center mx-auto max-w-lg\">\r\n      <svg\r\n        viewBox=\"0 0 24 24\"\r\n        className=\"text-red-600 w-5 h-5 sm:w-5 sm:h-5 mr-3\"\r\n      >\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\r\n        ></path>\r\n      </svg>\r\n      <span className=\"text-red-800\">{message}</span>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["styleInject","css","ref","PARTICIPANT_CONTROL_DROP","PARTICIPANT_CONTROL_ANSWER","PARTICIPANT_CONTROL_DIVERT","PARTICIPANT_CONTROL_TRANSFER_TO","PARTICIPANT_STATUS_CONNECTED","PARTICIPANT_STATUS_DIALING","PARTICIPANT_STATUS_RINGING","useOutsideClick","handler","useEffect","handleClickOutside","event","Select","title","data","selectedId","onSelect","isOpen","setIsOpen","useState","selectRef","useRef","selectedItem","setSelected","item","handleChange","newSelected","jsx","jsxs","CallActions","onCallAction","state","initializing","DialerState","BackSpaceBtn","onClickBS","Spinner","color","TransferComponent","performingTransfer","onTransfer","inputRef","transferNumber","setTransferNumber","label","e","DialerState2","callStateReducer","action","Dialer","eventSourceUrl","onDeviceSelect","devices","onMakeCall","onCallControlParticipant","activeDeviceId","phoneNumber","extensions","sourceCallerId","engagementId","dialedNumber","setDialed","dialerState","setDialerState","currentCalls","setCurrentCalls","callState","dispatchCallState","useReducer","ccOpertation","setCCOperation","operationDestination","setOperationDestination","isOperationInProcess","setIsOperationInProccess","performingAnswer","setPerformingAnswer","switchingDevice","setSwitchingDevice","isForceDropEnabled","setEnableForceDrop","source","handleCallAnswer","connectedCall","call","incomingCall","outgoingCall","callEndStatus","renderButtons","content","i","symbol","prev","onCallControlAction","useCallback","handleCallControlParticipant","handleActiveDevice","id","handleOnDrop","isIncoming","timeout","_a","ButtonForms","type","disabled","isLoading","onBtnClick","Error","message"],"mappings":"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","x_google_ignoreList":[0]}