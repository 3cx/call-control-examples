{"version":3,"file":"index.cjs.js","sources":["../../node_modules/style-inject/dist/style-inject.es.js","../src/constants.ts","../src/hooks.tsx","../src/components/Select/SelectComponent.tsx","../src/components/CallActions/CallActions.tsx","../src/components/BackSpaceBtn/BackSpaceBtnComponent.tsx","../src/components/Spinner/SpinnerComponent.tsx","../src/components/TransferComponent/TransferComponent.tsx","../src/components/Dialer/DialerComponent.tsx","../src/components/ButtonForms/button-forms.tsx","../src/components/Error/error.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","export const PARTICIPANT_CONTROL_DROP = \"drop\";\r\nexport const PARTICIPANT_CONTROL_ANSWER = \"answer\";\r\nexport const PARTICIPANT_CONTROL_DIVERT = \"divert\";\r\nexport const PARTICIPANT_CONTROL_ROUTE_TO = \"routeto\";\r\nexport const PARTICIPANT_CONTROL_TRANSFER_TO = \"transferto\";\r\nexport const PARTICIPANT_CONTROL_ATTACH_DATA = \"attach_participant_data\";\r\n\r\nexport const PARTICIPANT_STATUS_CONNECTED = \"Connected\";\r\nexport const PARTICIPANT_STATUS_DIALING = \"Dialing\";\r\nexport const PARTICIPANT_STATUS_RINGING = \"Ringing\";\r\n","import { useEffect } from \"react\";\r\n\r\ninterface OutsideClickHandlerProps {\r\n  ref: React.RefObject<HTMLElement>;\r\n  handler: () => void;\r\n}\r\n\r\nconst useOutsideClick = ({ ref, handler }: OutsideClickHandlerProps) => {\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (ref.current && !ref.current.contains(event.target as Node)) {\r\n        handler();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [ref, handler]);\r\n};\r\n\r\nexport default useOutsideClick;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport useOutsideClick from \"../../hooks\";\r\nimport { DNDevice } from \"../../types\";\r\n\r\ninterface SelectProps {\r\n  title?: string;\r\n  data: DNDevice[];\r\n  selectedId?: string;\r\n  onSelect?: (id: string) => void;\r\n}\r\n\r\nexport const Select: React.FC<SelectProps> = ({\r\n  title = \"Select\",\r\n  data,\r\n  selectedId,\r\n  onSelect,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const selectRef = useRef<HTMLDivElement>(null);\r\n  useOutsideClick({\r\n    ref: selectRef,\r\n    handler: () => setIsOpen(false),\r\n  });\r\n  const [selectedItem, setSelected] = useState<DNDevice | undefined>(\r\n    selectedId ? data.find((item) => item.device_id === selectedId) : undefined\r\n  );\r\n\r\n  const handleChange = (item: DNDevice) => {\r\n    setSelected(item);\r\n    onSelect && onSelect(item.device_id!);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedId && data) {\r\n      const newSelected = data.find((item) => item.device_id === selectedId);\r\n      newSelected && setSelected(newSelected);\r\n    } else {\r\n      setSelected(undefined);\r\n    }\r\n  }, [selectedId, data]);\r\n\r\n  return (\r\n    <div\r\n      ref={selectRef}\r\n      className=\"w-full relative inline-block text-left bg-darklight\"\r\n    >\r\n      <div className=\"group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"inline-flex items-center justify-between w-full px-4 py-2 text-sm font-medium text-white\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n        >\r\n          <span>{selectedItem?.user_agent || title}</span>\r\n          <svg\r\n            className=\"w-4 h-4 ml-2 -mr-1\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"currentColor\"\r\n          >\r\n            <path fillRule=\"evenodd\" d=\"M10 12l-5-5h10l-5 5z\" />\r\n          </svg>\r\n        </button>\r\n        {isOpen && (\r\n          <ul className=\"absolute w-full left-0 origin-top-left bg-darklight text-white divide-y divide-gray-100 shadow-lg\">\r\n            {data?.map((item) => (\r\n              <li\r\n                key={item.device_id}\r\n                onClick={() => handleChange(item)}\r\n                className=\"block px-4 py-2 text-sm text-white-600 cursor-pointer border-none hover:bg-bghover\"\r\n              >\r\n                {item.user_agent}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  PARTICIPANT_CONTROL_DIVERT,\r\n  PARTICIPANT_CONTROL_TRANSFER_TO,\r\n} from \"../../constants\";\r\nimport { DialerState } from \"../Dialer/DialerComponent\";\r\nimport { CallControlParticipantAction } from \"../../types\";\r\n\r\ntype CallActionsProps = {\r\n  state: DialerState;\r\n  onCallAction: (action: CallControlParticipantAction) => void;\r\n  initializing: boolean;\r\n};\r\n\r\nexport const CallActions: React.FC<CallActionsProps> = ({\r\n  onCallAction,\r\n  state,\r\n  initializing,\r\n}) => {\r\n  return (\r\n    <div className=\"h-3/5 border-t-2 border-b-2 border-darklight grid grid-cols-3 text-white text-center font-bold text-lg\">\r\n      <button\r\n        className=\"btn-dialer\"\r\n        disabled={state !== DialerState.Ringing || initializing}\r\n        onClick={() => onCallAction(PARTICIPANT_CONTROL_DIVERT)}\r\n      >\r\n        <svg\r\n          className=\"h-[35px] w-[35px]\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 640 512\"\r\n        >\r\n          <path\r\n            fill=\"white\"\r\n            d=\"M232 0c9.7 0 18.5 5.8 22.2 14.8s1.7 19.3-5.2 26.2l-39 39 58.7 58.7C282.3 152.4 300.8 160 320 160s37.7-7.6 51.3-21.3L503 7c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L405.3 172.7C382.6 195.3 352 208 320 208s-62.6-12.7-85.3-35.3L176 113.9l-39 39c-6.9 6.9-17.2 8.9-26.2 5.2s-14.8-12.5-14.8-22.2V24c0-13.3 10.7-24 24-24H232zM51.4 489.9l-35.4-62c-9.7-16.9-8.3-38.1 5.5-51.7C72.6 325.9 178.1 256 320 256s247.4 69.9 298.5 120.2c13.9 13.6 15.2 34.8 5.5 51.7l-35.4 62c-7.4 12.9-22.7 19.1-37 14.8L438.8 470.8c-13.5-4.1-22.8-16.5-22.8-30.6V384c-62.3-20.8-129.7-20.8-192 0v56.2c0 14.1-9.3 26.6-22.8 30.6L88.4 504.7c-14.3 4.3-29.6-1.8-37-14.8z\"\r\n          />\r\n        </svg>\r\n        <span>Divert</span>\r\n      </button>\r\n      <button\r\n        onClick={() => onCallAction(PARTICIPANT_CONTROL_TRANSFER_TO)}\r\n        className=\"btn-dialer\"\r\n        disabled={state !== DialerState.Connected || initializing}\r\n      >\r\n        <svg\r\n          className=\"h-[35px] w-[35px]\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 32 32\"\r\n        >\r\n          <path\r\n            d=\"M26.74 10.6c-1.35-1.44-2.73-2.84-4.11-4.25-.42-.42-.95-.4-1.45-.2-.51.21-.67.65-.67 1.18v2.01c-.81 0-.79.05-1.5-.02-.75-.07-1.26.23-1.76.78-3.37 3.76-6.77 7.48-10.13 11.24-.37.41-.75.59-1.29.57-1.03-.04.29-.02-.75-.01-.87.02-.95.1-.96 1.02-.01.77-.01 1.54 0 2.3.02.83.1.93.9.93 1.67 0 .98-.02 2.65.01.5.01.84-.16 1.18-.53 3.41-3.8 6.87-7.58 10.26-11.4.66-.74.58-.69 1.41-.56 0 .66.01 1.29 0 1.91-.01.56.18 1.01.71 1.23.52.22 1.03.18 1.44-.24 1.35-1.37 2.69-2.74 4.02-4.14.46-.5.5-1.34.05-1.83zM5.03 13.14c1.17-.04-.19.03.98-.03.66-.03 1.12.16 1.55.69.75.91 1.58 1.76 2.41 2.69 1.05-1.19 2.02-2.28 3.06-3.45-1.35-1.49-2.61-2.91-3.91-4.3-.18-.19-.53-.3-.81-.3-1.97-.03-1.4-.01-3.38-.02-.56 0-.83.24-.83.82.01 1.01.01 2.01 0 3.01-.01.67.3.91.93.89z\"\r\n            fill=\"white\"\r\n          />\r\n        </svg>\r\n        <span>Transfer</span>\r\n      </button>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n","interface BackSpaceBtnProps {\r\n  onClickBS: () => void;\r\n}\r\n\r\nexport const BackSpaceBtn: React.FC<BackSpaceBtnProps> = ({ onClickBS }) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={() => onClickBS()}\r\n      className=\"w-[30px] h-[30px] mr-4 active:scale-105\"\r\n    >\r\n      <svg\r\n        className=\"w-25 h-25 fill-white hover:fill-gray-400\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 576 512\"\r\n      >\r\n        <path d=\"M576 128c0-35.3-28.7-64-64-64H205.3c-17 0-33.3 6.7-45.3 18.7L9.4 233.4c-6 6-9.4 14.1-9.4 22.6s3.4 16.6 9.4 22.6L160 429.3c12 12 28.3 18.7 45.3 18.7H512c35.3 0 64-28.7 64-64V128zM271 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n};\r\n","type SpinnerProps = {\r\n  color?: string;\r\n};\r\nexport const Spinner: React.FC<SpinnerProps> = ({ color }) => {\r\n  return (\r\n    <div\r\n      aria-label=\"Loading...\"\r\n      role=\"status\"\r\n      className=\"flex items-center space-x-2\"\r\n    >\r\n      <svg\r\n        className={`h-[30px] w-[30px] animate-spin ${\r\n          !!color ? \"color\" : \"stroke-gray-500\"\r\n        }`}\r\n        viewBox=\"0 0 256 256\"\r\n      >\r\n        <line\r\n          x1=\"128\"\r\n          y1=\"32\"\r\n          x2=\"128\"\r\n          y2=\"64\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"195.9\"\r\n          y1=\"60.1\"\r\n          x2=\"173.3\"\r\n          y2=\"82.7\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"224\"\r\n          y1=\"128\"\r\n          x2=\"192\"\r\n          y2=\"128\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"195.9\"\r\n          y1=\"195.9\"\r\n          x2=\"173.3\"\r\n          y2=\"173.3\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"128\"\r\n          y1=\"224\"\r\n          x2=\"128\"\r\n          y2=\"192\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"60.1\"\r\n          y1=\"195.9\"\r\n          x2=\"82.7\"\r\n          y2=\"173.3\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"32\"\r\n          y1=\"128\"\r\n          x2=\"64\"\r\n          y2=\"128\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n        <line\r\n          x1=\"60.1\"\r\n          y1=\"60.1\"\r\n          x2=\"82.7\"\r\n          y2=\"82.7\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth=\"24\"\r\n        ></line>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n","import { BackSpaceBtn } from \"../BackSpaceBtn/BackSpaceBtnComponent\";\r\nimport { Spinner } from \"../Spinner/SpinnerComponent\";\r\n\r\ntype TransferComponentProps = {\r\n  onPerformingOperation: boolean;\r\n  onOperation: () => void;\r\n  inputRef: React.Ref<HTMLInputElement>;\r\n  destinationNumber: string;\r\n  setDestinationNumber: (num: string) => void;\r\n  label: string;\r\n};\r\n\r\nexport const TransferComponent: React.FC<TransferComponentProps> = ({\r\n  onPerformingOperation: performingTransfer,\r\n  onOperation: onTransfer,\r\n  inputRef,\r\n  destinationNumber: transferNumber,\r\n  setDestinationNumber: setTransferNumber,\r\n  label,\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-2 items-center justify-center text-sm py-5\">\r\n      <label htmlFor=\"tranferField\" className=\"text-sm\">\r\n        {label}\r\n      </label>\r\n      <input\r\n        id=\"transferField\"\r\n        ref={inputRef}\r\n        className=\"focus:outline-none text-center h-[34px] bg-transparent border-b border-darklight\"\r\n        value={transferNumber}\r\n        onChange={(e) => setTransferNumber(e.target.value)}\r\n      ></input>\r\n      <BackSpaceBtn\r\n        onClickBS={() =>\r\n          setTransferNumber(\r\n            transferNumber.substring(0, transferNumber.length - 1)\r\n          )\r\n        }\r\n      />\r\n      <button\r\n        disabled={transferNumber.length < 1 || performingTransfer}\r\n        className=\"bg-green-500 p-2 rounded-md disabled:bg-gray-400\"\r\n        onClick={() => onTransfer()}\r\n      >\r\n        {performingTransfer ? <Spinner /> : \"Proceed\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  PARTICIPANT_CONTROL_ANSWER,\r\n  PARTICIPANT_CONTROL_DROP,\r\n  PARTICIPANT_CONTROL_TRANSFER_TO,\r\n  PARTICIPANT_STATUS_CONNECTED,\r\n  PARTICIPANT_STATUS_DIALING,\r\n  PARTICIPANT_STATUS_RINGING,\r\n} from \"../../constants\";\r\nimport { Select } from \"../Select/SelectComponent\";\r\nimport {\r\n  ReactNode,\r\n  useCallback,\r\n  useEffect,\r\n  useReducer,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  CallControlParticipantAction,\r\n  CallingExtensionsContract,\r\n  CurrentCall,\r\n  DNDevice,\r\n} from \"../../types\";\r\nimport { CallActions } from \"../CallActions/CallActions\";\r\nimport { TransferComponent } from \"../TransferComponent/TransferComponent\";\r\nimport { BackSpaceBtn } from \"../BackSpaceBtn/BackSpaceBtnComponent\";\r\nimport { Spinner } from \"../Spinner/SpinnerComponent\";\r\n\r\nexport interface DialerProps {\r\n  eventSourceUrl: string;\r\n  devices: DNDevice[];\r\n  activeDeviceId?: string;\r\n  phoneNumber?: string;\r\n  sourceCallerId: string;\r\n  onMakeCall: (dest?: string) => Promise<Response>;\r\n  onDeviceSelect: (id: string) => Promise<Response>;\r\n  onCallControlParticipant: (\r\n    action: CallControlParticipantAction,\r\n    participantid?: number,\r\n    dest?: string\r\n  ) => Promise<Response>;\r\n  extensions?: CallingExtensionsContract;\r\n  engagementId?: number | null;\r\n}\r\n\r\nexport enum DialerState {\r\n  Idle,\r\n  Dialing,\r\n  Ringing,\r\n  Connected,\r\n}\r\n\r\nfunction callStateReducer(\r\n  state: CurrentCall | undefined,\r\n  action: {\r\n    type: \"full_update\" | \"attach_data\";\r\n    newState?: CurrentCall;\r\n    attachedData?: CurrentCall[\"attachedData\"];\r\n  }\r\n): CurrentCall | undefined {\r\n  switch (action.type) {\r\n    case \"full_update\": {\r\n      if (action.newState !== undefined) {\r\n        return {\r\n          ...action.newState,\r\n          attachedData: {\r\n            ...action.newState.attachedData,\r\n            ...(state?.attachedData || []), // we keep old attached data because it can contain hubspot data\r\n          },\r\n        };\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n    case \"attach_data\": {\r\n      if (action.attachedData !== undefined && state !== undefined) {\r\n        return {\r\n          ...state,\r\n          attachedData: action.attachedData,\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const Dialer: React.FC<DialerProps> = ({\r\n  eventSourceUrl,\r\n  onDeviceSelect,\r\n  devices,\r\n  onMakeCall,\r\n  onCallControlParticipant,\r\n  activeDeviceId,\r\n  phoneNumber,\r\n  extensions,\r\n  sourceCallerId,\r\n  engagementId,\r\n}) => {\r\n  const [dialedNumber, setDialed] = useState(phoneNumber ?? \"\");\r\n  const [dialerState, setDialerState] = useState(DialerState.Idle);\r\n  const [currentCalls, setCurrentCalls] = useState<CurrentCall[]>([]);\r\n  const [callState, dispatchCallState] = useReducer(\r\n    callStateReducer,\r\n    undefined\r\n  );\r\n\r\n  const [ccOpertation, setCCOperation] = useState<\r\n    CallControlParticipantAction | undefined\r\n  >(undefined);\r\n  const [operationDestination, setOperationDestination] = useState(\"\");\r\n\r\n  const [isOperationInProcess, setIsOperationInProccess] = useState(false);\r\n  const [performingAnswer, setPerformingAnswer] = useState(false);\r\n  const [switchingDevice, setSwitchingDevice] = useState(false);\r\n  const [isForceDropEnabled, setEnableForceDrop] = useState(false);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    const source = new EventSource(eventSourceUrl);\r\n    source.onopen = () => {\r\n      console.log(\"EventSource Connected\");\r\n      extensions?.initialized({\r\n        isLoggedIn: true,\r\n        sizeInfo: { width: 400, height: 600 },\r\n        engagementId,\r\n      });\r\n    };\r\n    source.onerror = console.error;\r\n    source.onmessage = function (e) {\r\n      try {\r\n        const data = JSON.parse(e.data);\r\n        setCurrentCalls(data.currentCalls);\r\n      } catch (e) {\r\n        extensions?.sendError({\r\n          message: \"Failed to parse JSON from EventSource\",\r\n        });\r\n      }\r\n    };\r\n    return () => source.close();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (dialerState === DialerState.Idle) {\r\n      if (phoneNumber && phoneNumber.length > 0) {\r\n        handleCallAnswer(phoneNumber);\r\n      }\r\n    }\r\n  }, [phoneNumber]);\r\n\r\n  useEffect(() => {\r\n    dispatchCallState({\r\n      type: \"attach_data\",\r\n      attachedData: { engagementId },\r\n    });\r\n  }, [engagementId]);\r\n\r\n  useEffect(() => {\r\n    const connectedCall = currentCalls?.find(\r\n      (call) => call.status === PARTICIPANT_STATUS_CONNECTED\r\n    );\r\n    const incomingCall = currentCalls?.find(\r\n      (call) => call.status === PARTICIPANT_STATUS_RINGING\r\n    );\r\n    const outgoingCall = currentCalls?.find(\r\n      (call) => call.status === PARTICIPANT_STATUS_DIALING\r\n    );\r\n\r\n    if (connectedCall && dialerState !== DialerState.Connected) {\r\n      if (dialerState === DialerState.Dialing) {\r\n        extensions?.callAnswered(); // hubspot outgoing call answered notify\r\n      }\r\n      setDialerState(DialerState.Connected);\r\n\r\n      dispatchCallState({ type: \"full_update\", newState: connectedCall });\r\n    }\r\n\r\n    if (outgoingCall && !callState) {\r\n      dispatchCallState({ type: \"full_update\", newState: outgoingCall });\r\n      if (dialerState !== DialerState.Dialing) {\r\n        setDialerState(DialerState.Dialing);\r\n      }\r\n      extensions?.outgoingCall({\r\n        //hubspot outgoing call notify\r\n        toNumber: outgoingCall.party || \"\",\r\n        createEngagement: true,\r\n        fromNumber: sourceCallerId,\r\n      });\r\n    }\r\n\r\n    if (incomingCall && !callState && dialerState === DialerState.Idle) {\r\n      setDialerState(DialerState.Ringing);\r\n      dispatchCallState({ type: \"full_update\", newState: incomingCall });\r\n    }\r\n\r\n    if (\r\n      currentCalls?.length === 0 &&\r\n      callState !== undefined &&\r\n      dialerState !== DialerState.Idle\r\n    ) {\r\n      const callEndStatus =\r\n        callState.status === PARTICIPANT_STATUS_CONNECTED\r\n          ? \"COMPLETED\"\r\n          : \"CANCELED\";\r\n      extensions?.callEnded({\r\n        callEndStatus,\r\n      });\r\n      extensions?.callCompleted({\r\n        engagementId: callState.attachedData.engagementId,\r\n        engagementProperties: {\r\n          hs_call_status: callEndStatus,\r\n        },\r\n      }); // Hubspot call completed\r\n\r\n      setDialerState(DialerState.Idle);\r\n      dispatchCallState({ type: \"full_update\", newState: undefined });\r\n    }\r\n  }, [\r\n    dialerState,\r\n    setDialerState,\r\n    dispatchCallState,\r\n    callState,\r\n    currentCalls,\r\n    setCurrentCalls,\r\n    extensions,\r\n  ]);\r\n\r\n  const renderButtons = () => {\r\n    const content: ReactNode[] = [];\r\n    for (let i = 1; i <= 12; i++) {\r\n      let symbol: string | number = \"\";\r\n      if (i < 10) {\r\n        symbol = i;\r\n      } else if (i === 10) {\r\n        symbol = \"*\";\r\n      } else if (i === 11) {\r\n        symbol = 0;\r\n      } else if (i === 12) {\r\n        symbol = \"#\";\r\n      }\r\n      content.push(\r\n        <button\r\n          onClick={() => setDialed((prev) => prev + symbol)}\r\n          className=\"btn-dialer\"\r\n          key={i}\r\n        >\r\n          {symbol}\r\n        </button>\r\n      );\r\n    }\r\n    return content;\r\n  };\r\n\r\n  const onCallControlAction = useCallback(\r\n    (action: CallControlParticipantAction) => {\r\n      setOperationDestination(\"\");\r\n      if (ccOpertation) {\r\n        setCCOperation(undefined);\r\n      } else {\r\n        setCCOperation(action);\r\n      }\r\n    },\r\n    [setOperationDestination, ccOpertation, setCCOperation]\r\n  );\r\n\r\n  const handleCallControlParticipant = useCallback(async () => {\r\n    if (!ccOpertation) {\r\n      return;\r\n    }\r\n    setIsOperationInProccess(true);\r\n    try {\r\n      await onCallControlParticipant(\r\n        ccOpertation,\r\n        callState?.participantId,\r\n        operationDestination\r\n      );\r\n    } catch (e) {\r\n    } finally {\r\n      setCCOperation(undefined);\r\n      setIsOperationInProccess(false);\r\n    }\r\n  }, [\r\n    ccOpertation,\r\n    setCCOperation,\r\n    setIsOperationInProccess,\r\n    operationDestination,\r\n    onCallControlParticipant,\r\n    callState,\r\n  ]);\r\n\r\n  const handleActiveDevice = useCallback(\r\n    async (id: string) => {\r\n      setSwitchingDevice(true);\r\n      try {\r\n        await onDeviceSelect(id);\r\n      } catch (e) {\r\n      } finally {\r\n        setSwitchingDevice(false);\r\n        setDialerState(DialerState.Idle);\r\n        dispatchCallState({ type: \"full_update\", newState: undefined });\r\n      }\r\n    },\r\n    [onDeviceSelect]\r\n  );\r\n\r\n  const handleOnDrop = async () => {\r\n    setEnableForceDrop(false);\r\n    try {\r\n      await onCallControlParticipant(\r\n        PARTICIPANT_CONTROL_DROP,\r\n        callState?.participantId\r\n      );\r\n    } catch (e) {\r\n      setDialerState(DialerState.Idle);\r\n    } finally {\r\n      if (isOperationInProcess) {\r\n        setOperationDestination(\"\");\r\n        setIsOperationInProccess(false);\r\n        setCCOperation(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCallAnswer = async (phoneNumber?: string) => {\r\n    const isIncoming = callState?.status === PARTICIPANT_STATUS_RINGING;\r\n    let timeout: number | null = null;\r\n    if (isIncoming && callState.directControll) {\r\n      setPerformingAnswer(true);\r\n      try {\r\n        await onCallControlParticipant(\r\n          PARTICIPANT_CONTROL_ANSWER,\r\n          callState.participantId\r\n        );\r\n      } catch (e) {\r\n      } finally {\r\n        setPerformingAnswer(false);\r\n      }\r\n    } else if (phoneNumber?.length || dialedNumber.length) {\r\n      try {\r\n        await onMakeCall(phoneNumber || dialedNumber);\r\n        setDialed(\"\");\r\n        if (dialerState !== DialerState.Dialing) {\r\n          setDialerState(DialerState.Dialing);\r\n          timeout = setTimeout(() => {\r\n            setEnableForceDrop(true);\r\n          }, 5000);\r\n        }\r\n      } catch (e) {\r\n        setDialerState(DialerState.Idle);\r\n        if (timeout) {\r\n          clearTimeout(timeout);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderStateNumber = () => {\r\n    switch (dialerState) {\r\n      case DialerState.Idle:\r\n        return (\r\n          <div className=\"flex justify-center items-end\">\r\n            <input\r\n              ref={inputRef}\r\n              className=\"bg-transparent focus:outline-none text-center\"\r\n              value={dialedNumber}\r\n              onChange={(e) => setDialed(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        );\r\n      case DialerState.Dialing:\r\n      case DialerState.Connected:\r\n      case DialerState.Ringing: {\r\n        return (\r\n          <div className=\"flex flex-col items-center justify-end\">\r\n            <span>\r\n              {callState?.party ? (\r\n                <div className=\"flex flex-col gap-2\">\r\n                  <span className=\"text-center\">{callState.party}</span>\r\n                  <span\r\n                    className={`flex items-center gap-1 font-bold text-sm animate-pulse ${\r\n                      dialerState === DialerState.Connected\r\n                        ? \"text-green-500\"\r\n                        : \"text-yellow-400\"\r\n                    }`}\r\n                  >\r\n                    <svg\r\n                      className={`w-[12px] h-[12px] ${\r\n                        dialerState === DialerState.Connected\r\n                          ? \"fill-green-500\"\r\n                          : \"fill-yellow-400\"\r\n                      }`}\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 512 512\"\r\n                    >\r\n                      <path d=\"M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z\" />\r\n                    </svg>\r\n                    {dialerState === DialerState.Connected\r\n                      ? \"Conencted\"\r\n                      : \"Dialing\"}\r\n                  </span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex flex-col gap-2\">\r\n                  <span className=\"animate-pulse font-bold text-sm text-white\"></span>\r\n                  <Spinner />\r\n                </div>\r\n              )}\r\n            </span>\r\n            {callState?.name && <span>{callState.name}</span>}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-[400px] h-[600px] bg-darkBg flex flex-col\">\r\n      <div>\r\n        {devices && (\r\n          <Select\r\n            data={devices}\r\n            selectedId={activeDeviceId}\r\n            onSelect={handleActiveDevice}\r\n          />\r\n        )}\r\n      </div>\r\n      <div\r\n        className=\"h-2/5 text-white font-bold text-xl grid grid-rows-2\"\r\n        onClick={() => inputRef.current?.focus()}\r\n      >\r\n        {renderStateNumber()}\r\n        {dialerState === DialerState.Idle && (\r\n          <div className=\"flex justify-end items-center\">\r\n            <BackSpaceBtn\r\n              onClickBS={() =>\r\n                setDialed(dialedNumber.substring(0, dialedNumber.length - 1))\r\n              }\r\n            />\r\n          </div>\r\n        )}\r\n        {dialerState !== DialerState.Idle && ccOpertation !== undefined && (\r\n          <TransferComponent\r\n            inputRef={inputRef}\r\n            onOperation={handleCallControlParticipant}\r\n            onPerformingOperation={isOperationInProcess}\r\n            destinationNumber={operationDestination}\r\n            setDestinationNumber={setOperationDestination}\r\n            label={\r\n              ccOpertation === PARTICIPANT_CONTROL_TRANSFER_TO\r\n                ? \"Transfer to:\"\r\n                : \"Divert to:\"\r\n            }\r\n          />\r\n        )}\r\n      </div>\r\n      {dialerState === DialerState.Idle ? (\r\n        <div className=\"h-3/5 border-t-2 border-b-2 border-darklight grid grid-cols-3 text-white text-center font-bold text-lg\">\r\n          {renderButtons()}\r\n        </div>\r\n      ) : (\r\n        <CallActions\r\n          onCallAction={onCallControlAction}\r\n          state={dialerState}\r\n          initializing={!callState}\r\n        />\r\n      )}\r\n      <div className=\"h-1/6 flex flex-row\">\r\n        {(dialerState === DialerState.Idle ||\r\n          dialerState === DialerState.Ringing) && (\r\n          <div className=\"flex justify-center items-center w-full\">\r\n            <button\r\n              type=\"button\"\r\n              disabled={\r\n                switchingDevice ||\r\n                performingAnswer ||\r\n                (callState !== undefined\r\n                  ? callState.directControll !== true\r\n                  : false)\r\n              }\r\n              onClick={() => handleCallAnswer()}\r\n              className=\"flex justify-center items-center w-full h-full bg-green-500 hover:bg-green-700 disabled:bg-gray-400\"\r\n            >\r\n              <svg\r\n                fill=\"white\"\r\n                className=\"w-[25px] h-[25px]\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 512 512\"\r\n              >\r\n                <path d=\"M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        )}\r\n        {dialerState !== DialerState.Idle && (\r\n          <div className=\"flex justify-center items-center w-full\">\r\n            <button\r\n              disabled={\r\n                (switchingDevice ||\r\n                  (dialerState === DialerState.Dialing &&\r\n                    callState === undefined)) &&\r\n                !isForceDropEnabled\r\n              }\r\n              onClick={() => handleOnDrop()}\r\n              className=\"flex justify-center items-center w-full h-full bg-red-500 hover:bg-red-700 disabled:bg-gray-400\"\r\n            >\r\n              <svg\r\n                fill=\"white\"\r\n                className=\"w-[25px] h-[25px] rotate-[133deg]\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 512 512\"\r\n              >\r\n                <path d=\"M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Spinner } from \"../Spinner/SpinnerComponent\";\r\n\r\ntype BtnFormProps = {\r\n  type: \"button\" | \"submit\";\r\n  disabled: boolean;\r\n  label: string;\r\n  isLoading: boolean;\r\n  onBtnClick?: (...args: any[]) => void;\r\n};\r\n\r\nexport const ButtonForms: React.FC<BtnFormProps> = ({\r\n  type,\r\n  disabled,\r\n  label,\r\n  isLoading,\r\n  onBtnClick,\r\n}: BtnFormProps) => {\r\n  return (\r\n    <button\r\n      disabled={disabled}\r\n      onClick={onBtnClick}\r\n      type={type}\r\n      className=\"flex justify-center items-center rounded w-[150px] h-[45px] bg-gray-800 hover:bg-gray-700 text-white disabled:bg-gray-400 disabled:text-gray-600\"\r\n    >\r\n      {isLoading ? <Spinner /> : label}\r\n    </button>\r\n  );\r\n};\r\n","interface ErrorProps {\r\n  message: string;\r\n}\r\nexport const Error: React.FC<ErrorProps> = ({ message }: ErrorProps) => {\r\n  return (\r\n    <div className=\"bg-red-200 px-6 py-4 my-4 rounded-md flex items-center mx-auto max-w-lg\">\r\n      <svg viewBox=\"0 0 24 24\" className=\"text-red-600 w-8 h-8 mr-3\">\r\n        <path\r\n          fill=\"currentColor\"\r\n          d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\r\n        ></path>\r\n      </svg>\r\n      <span className=\"text-red-800\">{message}</span>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["styleInject","css","ref","PARTICIPANT_CONTROL_DROP","PARTICIPANT_CONTROL_ANSWER","PARTICIPANT_CONTROL_DIVERT","PARTICIPANT_CONTROL_TRANSFER_TO","PARTICIPANT_STATUS_CONNECTED","PARTICIPANT_STATUS_DIALING","PARTICIPANT_STATUS_RINGING","useOutsideClick","handler","useEffect","handleClickOutside","event","Select","title","data","selectedId","onSelect","isOpen","setIsOpen","useState","selectRef","useRef","selectedItem","setSelected","item","handleChange","newSelected","jsx","jsxs","CallActions","onCallAction","state","initializing","DialerState","BackSpaceBtn","onClickBS","Spinner","color","TransferComponent","performingTransfer","onTransfer","inputRef","transferNumber","setTransferNumber","label","e","DialerState2","callStateReducer","action","Dialer","eventSourceUrl","onDeviceSelect","devices","onMakeCall","onCallControlParticipant","activeDeviceId","phoneNumber","extensions","sourceCallerId","engagementId","dialedNumber","setDialed","dialerState","setDialerState","currentCalls","setCurrentCalls","callState","dispatchCallState","useReducer","ccOpertation","setCCOperation","operationDestination","setOperationDestination","isOperationInProcess","setIsOperationInProccess","performingAnswer","setPerformingAnswer","switchingDevice","setSwitchingDevice","isForceDropEnabled","setEnableForceDrop","source","handleCallAnswer","connectedCall","call","incomingCall","outgoingCall","callEndStatus","renderButtons","content","i","symbol","prev","onCallControlAction","useCallback","handleCallControlParticipant","handleActiveDevice","id","handleOnDrop","isIncoming","timeout","renderStateNumber","_a","ButtonForms","type","disabled","isLoading","onBtnClick","Error","message"],"mappings":"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","x_google_ignoreList":[0]}